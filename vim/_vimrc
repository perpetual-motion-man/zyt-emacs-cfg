" Everything is put under "~/.vimz/", as vim runtimepath
"
" Install:
"
" 1. download and put file `plug.vim` under "~/.vimz/autoload/":
" see: https://github.com/junegunn/vim-plug
" it maybe like: curl -fLo ~/.vimz/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" 2. source this file, i.e., append line `source ~/.vimz/_vimrc` to:
"   neovim: "~/.config/nvim/init.vim" (touch .../init.vim)
"   vim:    "~/.vimrc" (cp /etc/vim/vimrc ~/.vimrc)
"
" 3. start vim, and run:
"   :PlugInstall


set nocompatible
set rtp+=~/.vimz

call plug#begin('~/.vimz/plugged')
Plug 'preservim/nerdtree', {'on': ['NERDTree', 'NERDTreeToggle']}
"Plug 'justinmk/vim-dirvish'
if executable('ranger')
  Plug 'rafaqz/ranger.vim', {'on': ['RangerEdit', 'RangerVSplit', 'RangerSplit', 'RangerTab']}  " using `ranger`
endif
Plug 'farmergreg/vim-lastplace'
if 1 || executable('ctags')
  Plug 'preservim/tagbar', {'on': ['TagbarOpen', 'TagbarToggle']}  " using `ctags`
endif
Plug 'haya14busa/vim-asterisk'
Plug 'google/vim-searchindex'
Plug 'tpope/vim-sleuth'
Plug 'Yggdroot/indentLine', {'for': ['c', 'cpp', 'python', 'go', 'java', 'scala', 'javascript', 'cs']}
Plug 'miyakogi/conoline.vim'
"Plug 'wellle/context.vim'
"Plug 'mhinz/vim-signify'
Plug 'Raimondi/delimitMate'
Plug 'mg979/vim-visual-multi'
Plug 'markonm/traces.vim'
Plug 'rhysd/clever-f.vim'
Plug 'easymotion/vim-easymotion', {'on': '<Plug>(easymotion-s)'}
"Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
Plug 'Yggdroot/LeaderF'
if executable('rg') || executable('ag')
  Plug 'pechorin/any-jump.vim'
  Plug 'dyng/ctrlsf.vim'
endif
"Plug 'mhinz/vim-grepper'
Plug 'brooth/far.vim', {'on': ['F', 'Far', 'Fardo', 'Farf', 'Farr']}
"Plug 'dense-analysis/ale'
Plug 'octol/vim-cpp-enhanced-highlight', {'for': 'cpp'}
Plug 'Vimjas/vim-python-pep8-indent', {'for': 'python'}
Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins', 'for': 'python'}
"Plug 'google/vim-maktaba'
"Plug 'google/vim-codefmt'
Plug 'honza/vim-snippets'
if executable("node")
  Plug 'neoclide/coc.nvim', {'branch': 'release'}  " using nodejs `node`
endif
Plug 'luochen1990/rainbow'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ojroques/vim-scrollstatus'
Plug 'sheerun/vim-polyglot'  " used by other colorscheme(s)
Plug 'sainnhe/edge'
Plug 'sainnhe/sonokai'
"Plug 'sickill/vim-monokai'
"Plug 'rakr/vim-one'
"Plug 'NLKNguyen/papercolor-theme'
Plug 'RRethy/vim-illuminate'
call plug#end()
"


" file encoding {
"set encoding=utf-8
"set fileencodings=ucs-bom,utf-8,ASCII,gbk,cp936,gb18030,big5,euc-jp,euc-kr,default,latin1
" }

set showcmd             " Show (partial) command in status line.
set showmatch           " Show matching brackets.
set ignorecase          " Do case insensitive matching
set smartcase           " Do smart case matching
set incsearch           " Incremental search
set mouse=a            " Enable mouse usage (all modes)
set hls
set nu
"set relativenumber number
"autocmd InsertEnter * :set norelativenumber number
"autocmd InsertLeave * :set relativenumber number
"set showmode        " Display the current mode
set scrolloff=1     " Minimum lines to keep above and below cursorline

"set wrap            " wrap long lines
"set shiftwidth=4    " indent equals 4 spaces
"set tabstop=4       " An indentation every 4 columns
"set expandtab       " Tabs are spaces, not tabs
"set softtabstop=4   " Let backspace delete indent
set autoindent
set cindent
"set backspace=indent,eol,start  " Backspace for dummies

"set title
set hidden
"set confirm
"set nobackup    " backup~ file
"set noundofile  " .un~ file
set updatetime=400

" Uncomment the following to have Vim jump to the last position when reopening a file
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


" mapleader \
map <Space> <Leader>
"nmap <Leader><Space> :

nnoremap ; :
"nnoremap : ;
vnoremap ; :
"vnoremap : ;
nnoremap ZZ :x
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" search selected strings in visual mode,default except backslash,see :help magic
" yank and search very nomagic {
"vnoremap <Leader>* y/\V<C-r>"
"vnoremap <Leader># y?\V<C-r>"
" }
vnoremap <C-c> "+y
inoremap <C-v> <ESC>"+pa

" go between windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" #ctags setting
" `ctags -R --fields=+SinKaz --c-kinds=+p --c++-kinds=+p *`
set tags=tags;
nnoremap <C-]> g<C-]>
"nnoremap <Leader><C-]> <C-w>g<C-]>
"nnoremap <Leader><C-]> :tabnew %<CR>g<C-]>


function! s:MyIsTheDirExists(d)
  return isdirectory(expand("~/.vimz/plugged/") . a:d)
endfunction

if s:MyIsTheDirExists("nerdtree")
  nmap <Leader>tn :NERDTreeToggle<CR>
  " Exit Vim if NERDTree is the only window left.
  autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
  let NERDTreeShowBookmarks = 1
  let NERDTreeIgnore = ['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
  let NERDTreeChDirMode = 0
  let NERDTreeQuitOnOpen = 1
  let NERDTreeMouseMode = 2
  let NERDTreeShowHidden = 1
endif

if s:MyIsTheDirExists("ranger.vim")
  map <leader>rr :RangerEdit<cr>
  map <leader>rv :RangerVSplit<cr>
  map <leader>rs :RangerSplit<cr>
  map <leader>rt :RangerTab<cr>
  map <leader>ri :RangerInsert<cr>
  map <leader>ra :RangerAppend<cr>
  map <leader>rc :set operatorfunc=RangerChangeOperator<cr>g@
  map <leader>rd :RangerCD<cr>
  map <leader>rld :RangerLCD<cr>
endif

if s:MyIsTheDirExists('vim-lastplace')
  let g:lastplace_open_folds = 0
endif

if s:MyIsTheDirExists("tagbar")
  nmap <Leader>tt :TagbarToggle<CR>
  "let g:tagbar_ctags_bin = 'C:\Ctags\ctags.exe'
  let g:tagbar_sort = 0  " sort according to order
  let g:tagbar_indent = 3
  let g:tagbar_show_linenumbers = 1  " Show absolute line numbers
  "let g:tagbar_autofocus = 1 " focus Tagbar window when opened
  "let g:tagbar_left = 1  " default right-hand side
  if 0 || executable("ctags")
    autocmd FileType c,cpp nested :TagbarOpen
  endif
endif

if s:MyIsTheDirExists("vim-asterisk")
  map *  <Plug>(asterisk-z*)
  map #  <Plug>(asterisk-z#)
  map g* <Plug>(asterisk-gz*)
  map g# <Plug>(asterisk-gz#)
endif

if s:MyIsTheDirExists("indentLine")
  "let g:indentLine_enabled = 0
  let g:indentLine_showFirstIndentLevel = 1
  "let g:indentLine_fileType = ['c', 'cpp', 'python', 'go', 'java', 'scala', 'javascript', 'cs']
endif

if s:MyIsTheDirExists("vim-easymotion")
  let g:EasyMotion_do_mapping = 0
  nmap <Leader>g <Plug>(easymotion-s)
endif

if s:MyIsTheDirExists("vim-visual-multi")
  let g:VM_maps = {}
  let g:VM_maps['Find Under']         = '<C-d>'
  let g:VM_maps['Find Subword Under'] = '<C-d>'
endif

if s:MyIsTheDirExists("LeaderF")
  "let g:Lf_ShortcutF = '<C-P>'
  noremap <Leader>f :Leaderf 
  " noremap <Leader>ff :LeaderfFile<CR>
  let g:Lf_ShortcutF = "<Leader>ff"
  " noremap <Leader>fb :LeaderfBuffer<CR>
  let g:Lf_ShortcutB = "<Leader>fb"
  noremap <Leader>fm :LeaderfFunction<CR>
  noremap <Leader>fl :LeaderfLine<CR>
  noremap <Leader>ft :LeaderfTag<CR>
  let g:Lf_ShowDevIcons = 0
  let g:Lf_FollowLinks = 1
  let g:Lf_DefaultMode = "Regex"
  "let g:Lf_Ctags = "/usr/local/universal-ctags/ctags"
endif

if s:MyIsTheDirExists("far.vim")
  "set lazyredraw            " improve scrolling performance when navigating through large results
  " shortcut for far.vim find
  nnoremap <silent> <Leader>F  :F <C-r><C-w> %<cr>
  vnoremap <silent> <Leader>F  :F <C-r><C-w> %<cr>
  " shortcut for far.vim replace
  "nnoremap <silent> <Replace-Shortcut>  :Farr<cr>
  "vnoremap <silent> <Replace-Shortcut>  :Farr<cr>
endif

if s:MyIsTheDirExists("vim-cpp-enhanced-highlight")
  let g:cpp_class_decl_highlight = 1
endif

if s:MyIsTheDirExists("coc.nvim")
  " Use tab for trigger completion with characters ahead and navigate.
  inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Make <CR> auto-select the first completion item and notify coc.nvim to
  " format on enter, <cr> could be remapped by other vim plugin
  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  let g:coc_disable_startup_warning = 1
  "let g:coc_global_extensions = ['coc-marketplace', 'coc-snippets', 'coc-vimlsp', 'coc-json', 'coc-pyright', 'coc-cmake']
  let g:coc_global_extensions = ['coc-marketplace', 'coc-snippets', 'coc-vimlsp', 'coc-json', 'coc-cmake']
endif

if s:MyIsTheDirExists("rainbow")
  let g:rainbow_active = 1  "set to 0 if you want to enable it later via :RainbowToggle
endif

if s:MyIsTheDirExists("vim-airline")
  set laststatus=2
  let g:airline_section_y = 'sw%{&shiftwidth}/ts%{&tabstop} %{&fenc}[%{&ff}]'
  if s:MyIsTheDirExists('vim-scrollstatus')
    let g:scrollstatus_symbol_track = '='
    let g:scrollstatus_symbol_bar = '|'
    let g:airline_section_z = '%l:%c%V(%p%%*%L) %{ScrollStatus()}'  " line:col,percentage
  else
    let g:airline_section_z = '%l:%c%V(%p%%*%L)'  " line:col,percentage
  endif
  let g:airline#extensions#tabline#enabled = 1
endif

if s:MyIsTheDirExists("vim-airline-themes")
  let g:airline_theme='tomorrow'
endif

if has('termguicolors')
  set termguicolors
endif
if s:MyIsTheDirExists("edge")
  "let g:edge_enable_italic = 1
  colorscheme edge
elseif s:MyIsTheDirExists("sonokai")
  "let g:sonokai_enable_italic = 1
  colorscheme sonokai
elseif s:MyIsTheDirExists("vim-one")
  set background=dark
  let g:one_allow_italics = 1
  colorscheme one
elseif s:MyIsTheDirExists("vim-monokai")
  colorscheme monokai
elseif s:MyIsTheDirExists("onedark.vim")
  colorscheme onedark
endif

if s:MyIsTheDirExists('vim-illuminate')
  let g:Illuminate_delay = 100
  "hi illuminatedWord cterm=undercurl gui=undercurl
elseif s:MyIsTheDirExists('vim_current_word')
  let g:vim_current_word#highlight_current_word = 0
  let g:vim_current_word#highlight_delay = 50
  " set cterm after colorscheme loaded
  hi CurrentWordTwins cterm=standout gui=standout
endif
