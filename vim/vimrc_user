"------------------------------
" !!!请确认vim已经 set nocompatible (一般在vimrc第一行)!!!

" OS type {
if (has("win32") || has("win64") || has("win95"))
    let g:osmswin = 1
elseif (has("unix") && !has("macunix") && !has("win32unix"))
    let g:oslinux = 1
elseif (has("macunix"))
    "let g:osapplemac = 1
endif
" }

" 插件管理Plugins management:Vundle on linux,pathogen on MsWin.
if exists("g:oslinux")
  " To use Vundle on linux,first you need:
  " mkdir ~/.vim/bundle/
  " $ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  " usage:
  "   :PluginInstall                               =install configured bundles
  "   :PluginUpdate [vim-surround vim-fugitive]    =update specific plugins
  "   :PluginClean
  "   :PluginList                                  =list installed bundles
  " Vundle start: {
  "set nocompatible
  filetype off  " required
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin()
  "" plugins must be added here: {
  Plugin 'VundleVim/Vundle.vim'  " let Vundle manage Vundle
  Plugin 's3rvac/AutoFenc'
  Plugin 'nanotech/jellybeans.vim'
  "Plugin 'vim-airline/vim-airline'
  "Plugin 'vim-airline/vim-airline-themes'
  "Plugin 'bling/vim-bufferline'
  Plugin 'luochen1990/rainbow'
  "Plugin 'Yggdroot/indentLine'
  Plugin 'majutsushi/tagbar'       " 依赖ctags
  "Plugin 'dyng/ctrlsf.vim'         " 依赖ag
  Plugin 'Shougo/neocomplete.vim'  " 依赖lua
  "Plugin 'drmingdrmer/xptemplate'
  Plugin 'scrooloose/nerdtree'
  "Plugin 'scrooloose/nerdcommenter'
  "Plugin 'scrooloose/syntastic'
  "Plugin 'mbbill/undotree'
  "Plugin 'roman/golden-ratio'
  "Plugin 'zhaocai/GoldenView.Vim'  [x]
  "Plugin 'terryma/vim-multiple-cursors'
  "Plugin 'exvim/ex-showmarks'
  "Plugin 'jacquesbh/vim-showmarks'  " 不占用<leader>m..
  Plugin 'easymotion/vim-easymotion'
  Plugin 'henrik/vim-indexed-search'
  "Plugin 'Mark--Karkat'  " github上版本较旧,建议手动安装vmb包
  "Plugin 'godlygeek/tabular'
  " TODO:
  "Plugin 'w0ng/vim-hybrid'
  "Plugin 'ctrlpvim/ctrlp.vim'
  "Plugin 'tpope/vim-surround'
  "Plugin 'matchit.zip'
  "Plugin 'elzr/vim-json'
  "Plugin 'jceb/vim-orgmode'
  "" }
  call vundle#end()          " required
  filetype plugin indent on  " required
  " } Vundle end.
elseif exists("g:osmswin")
  " Install pathogen(on linux) #github:tpope/vim-pathogen:
  "   mkdir -p ~/.vim/autoload ~/.vim/bundle
  "   put pathogen.vim to ~/.vim/autoload/ and then plugins to ~/.vim/bundle/
  "   on MsWin:change all occurrences of ~/.vim to ~\vimfiles
  " pathogen start: {
  execute pathogen#infect()
  syntax on
  filetype plugin indent on
  " } pathogen end.
endif

" 文件编码 {
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,ASCII,gbk,cp936,gb18030,big5,euc-jp,euc-kr,default,latin1
" }

if has("gui_running")
  set guioptions-=T  " remove gui toolbar
  set guioptions+=a  " autoselect
  set guioptions+=b

  if exists("g:osmswin")
    set guifont=Dejavu\ Sans\ Mono:h11,Droid\ Sans\ Mono:h11,Consolas:h11,Courier\ New:h11
    set langmenu=en
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim     " 解决菜单乱码
    "language messages zh_CN.utf-8  " 解决consle输出乱码
    " start gVim maximized,see :help gui-win32-maximized
    autocmd GUIEnter * simalt ~x
  elseif exists("g:oslinux")
    " % current file name,%:p its full path,%:p:h gives its directory(the "head" of the full path)
    autocmd BufEnter * if expand("%:p:h") !~ '://' | lcd %:p:h | endif
    set guifont=Dejavu\ Sans\ Mono\ 11,Droid\ Sans\ Mono\ 11,Courier\ New\ Regular\ 11
    "set guioptions+=b  " vim-gtk显示底部滚动条,避免vim-airline插件遮挡一行laststatus
  endif
endif

"set wrap           " wrap long lines
set shiftwidth=4   " indent equals 4 spaces
set tabstop=4      " An indentation every 4 columns
"set expandtab      " Tabs are spaces, not tabs
"set softtabstop=4  " Let backspace delete indent
set autoindent
set cindent
"set backspace=indent,eol,start  " Backspace for dummies

"set magic       " pattern mode
set ignorecase  " Case insensitive search,use \c or \C to override it
set smartcase   " Case sensitive when upperCase present,when set ignorecase
set hlsearch    " Highlight search terms
set incsearch   " Find as you type search

set showcmd
set showmode    " Display the current mode
set showmatch   " Show matching brackets/parenthesis
"set matchtime=1
set scrolloff=1    " Minimum lines to keep above and below cursorline
"set listchars=tab:\┆\ ,trail:•,extends:~,nbsp:. " eol:¶//Highlight problematic whitespace,with :set list
set listchars=tab:⤍\ ,trail:•,extends:~,nbsp:. " eol:¶
set list
set title

"set hidden      " Allow buffer switching without saving
"set confirm
"set autoread
"set splitright  " Puts new vsplit windows to the right of the current
"set splitbelow  " Puts new split windows to the bottom of the current
set nobackup    " backup~ file
set noundofile  " .un~ file,generated by Cream-vim on MsWin

set nu
"set relativenumber number
"autocmd InsertEnter * :set norelativenumber number
"autocmd InsertLeave * :set relativenumber number

" 定义<Leader>,default \ key
let mapleader = ','
" 映射;到:快速进入命令
nnoremap ; :
nnoremap ZZ :x
" hotkey shift-b:buffer next
map <S-b> :bn<CR>

" 搜索visual mode selected text,default except backslash,see :help magic
" yank and search very nomagic {
vnoremap <Leader>* y/\V<C-r>"
vnoremap <Leader># y?\V<C-r>"
" }

" 配色方案 #github:nanotech/jellybeans.vim(备选tomasr/molokai)
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\jellybeans.vim"))) ||
\  (exists("g:oslinux") && has("gui_running") && isdirectory(expand("~/.vim/bundle/jellybeans.vim")))
  let g:jellybeans_overrides = {
  \ 'Comment': {'guifg': '555555', 'guibg': '',
  \             'ctermfg': 'Grey', 'ctermbg': '',
  \             'attr': 'italic'},
  \ 'Search': {'guifg': '000000', 'guibg': 'FF8C00',
  \             'ctermfg': 'Magenta', 'ctermbg': '',
  \             'attr': ''}, }
  "set background=dark
  colorscheme jellybeans
elseif (exists("g:oslinux") && !has("gui_running"))  " in terminal
  "set background=dark
  colorscheme default
elseif has("gui_running")
  "set guioptions+=b  " show bottom scrollbar
  colorscheme morning
  hi Comment guifg=darkgray gui=italic
  "set cursorline
  "highlight cursorline guibg=NONE gui=underline  " colorscheme should come first
endif

" 状态栏airline #github:vim-airline/vim-airline
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\vim-airline"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/vim-airline")))
  set laststatus=2  " 原生默认在split时laststatus才出现
  let g:airline_section_z = '%l:%c%V(%p%%/%L)'  " line:col,percentage
  let g:airline_theme = 'powerlineish'
  " 活动buffer标识,手动注释掉.../vim-airline/autoload/airline/extensions/bufferline.vim两句: {
  " let g:bufferline_active_buffer_left = ''
  " let g:bufferline_active_buffer_right = ''
  " }
elseif (1 && has("gui_running") && has('statusline'))  " 原生状态栏的自定义(注意要放在colorscheme后)
    set laststatus=2
    " Left aligned:
    set statusline=%1*%n:%<%f%*          " Buffer number,Filename
    set statusline+=%1*%m%r%w%h%*\ \|    " Options
    set statusline+=\ Filetype:%y        " Filetype
    set statusline+=\ tab:%{&tabstop}
    set statusline+=\ [%{&fenc},%{&ff}]  " Filetype
    "set statusline+=\|\ [%{getcwd()}]    " Current dir
    " Right aligned:
    set statusline+=%=%-(%l:%c%V%)\ \|\ %p%%(%L)\   " file nav info
    autocmd InsertEnter * :hi statusline guibg=DarkCyan
    autocmd InsertLeave * :hi statusline guibg=#073642
    " rgb #073642 comes from solarized dark
    hi statusline guibg=#073642
    hi User1 guifg=DarkYellow guibg=#073642
endif

" 彩虹括号 #github:luochen1990/rainbow
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\rainbow"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/rainbow")))
  let g:rainbow_active = 1  " 0 if you want to enable it later via :RainbowToggle
endif

" 显示缩进线 #github:Yggdroot/indentLine(适用于空格缩进)(备选nathanaelkane/vim-indent-guides)
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\indentLine"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/indentLine")))
  let g:indentLine_char = '┆'
  let g:indentLine_enabled = 1  " use ':IndentLinesToggle' toggles it
endif

" 变量函数列表Tagbar #github:majutsushi/tagbar
" 依赖:Exuberant ctags在系统PATH中
" usage:<Leader>tt
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\tagbar"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/tagbar")))
  nnoremap <silent> <Leader>tt :TagbarToggle<CR>
  "let g:tagbar_ctags_bin = 'C:\Ctags\ctags.exe'
  let g:tagbar_sort = 0  " sort according to order
  let g:tagbar_indent = 3
  let g:tagbar_show_linenumbers = 1  " Show absolute line numbers
  let g:tagbar_width = 60  " Width of the Tagbar window in characters
  "let g:tagbar_left = 1  " default right-hand side
  "let g:tagbar_autofocus = 1  " focus Tagbar window when opened
endif

" 仿SublimeText的Ctrl-Shift-F #github:dyng/ctrlsf.vim
" 依赖:ag #github:ggreer/the_silver_searcher
"   Windows:ag在系统PATH中
"   Ubuntu13.10+:sudo apt-get install silversearcher-ag
" usage:F3,shift-F3;中文路径可能会出问题
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\ctrlsf.vim"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/ctrlsf.vim")))
  "let g:ctrlsf_regex_pattern = 1
  let g:ctrlsf_position = 'right'
  nmap <F3> <Plug>CtrlSFCwordPath
  vmap <F3> <Plug>CtrlSFVwordPath
  nnoremap <S-F3> :CtrlSFToggle<CR>
  inoremap <S-F3> <Esc>:CtrlSFToggle<CR>
endif

" 单词自动补全 #github:Shougo/neocomplete.vim(备选Shougo/neocomplcache.vim)
" 依赖:neocomplete.vim需lua支持
if (has("lua") && exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\neocomplete.vim"))) ||
\  (has("lua") && exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/neocomplete.vim")))
" vim --version查看+lua和版本,vim中命令:echo has("lua")返回值1则OK,否则...
" Ubuntu上:sudo apt-get install vim-gtk
" Windows上lua说明:
"  例如Cream-vim使用lua51版本,去http://lua-users.org/wiki/LuaBinaries下载二进制
"  http://sourceforge.net/projects/luabinaries/files/5.1.4/Tools%20Executables/lua5_1_4_Win32_bin.zip/download
"  不论Windows是32or64bit,都要用lua***_Win32_bin.zip
"  将lua51.dll和lua5.1.dll放到gvim.exe同目录下,然后vim中echo has("lua")返回值
  let g:acp_enableAtStartup = 0  " Disable AutoComplPop
  let g:neocomplete#enable_at_startup = 1
  "let g:neocomplete#auto_completion_start_length = 1  " 多少字符触发,default 2
  let g:neocomplete#enable_camel_case = 1
  let g:neocomplete#enable_smart_case = 1  " Use smartcase
  let g:neocomplete#min_keyword_length = 1
  " Set minimum syntax keyword length:
  let g:neocomplete#sources#syntax#min_keyword_length = 1
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
  " <TAB>选择补全项:
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
elseif (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\neocomplcache.vim"))) ||
\      (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/neocomplcache.vim")))
  let g:acp_enableAtStartup = 0  " Disable AutoComplPop
  let g:neocomplcache_enable_at_startup = 1
  "let g:neocomplcache_auto_completion_start_length = 1
  let g:neocomplcache_enable_camel_case_completion = 1
  let g:neocomplcache_enable_smart_case = 1  " Use smartcase
  let g:neocomplcache_enable_underbar_completion = 1
  let g:neocomplcache_min_keyword_length = 1
  " Set minimum syntax keyword length:
  let g:neocomplcache_min_syntax_length = 1
  let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
  " <TAB>选择补全项:
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
endif

" 代码片段 #github:drmingdrmer/xptemplate(备选SirVer/ultisnips)
" usage:Ctrl-\
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\xptemplate"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/xptemplate")))
  " 花括号占一行,函数名返回类型同一行,括号内紧贴代码:
  let g:xptemplate_vars = "BRif=\n&BRel=\n&BRloop=\n&BRstc=\n&BRfun=&SParg="
endif

" [x]TODO:配置IDE #github:WolfgangMehner/vim-plugins
" TODO:配置C调用树 #github:hari-rangarajan/CCTree
" [x]TODO:配置代码上下文浏览 #github:wesleyche/SrcExpl
" TODO:配置显示函数声明 #github:mbbill/echofunc

" 文件树NERDTree #github:scrooloose/nerdtree
" usage:<Leader>o
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\nerdtree"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/nerdtree")))
  "map <C-e> <Plug>NERDTreeTabsToggle<CR>
  nmap <Leader>o :NERDTreeFind<CR>
  " 打开着的只剩NERDTree时:q退出:
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
  let NERDTreeShowBookmarks = 1
  let NERDTreeIgnore = ['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
  let NERDTreeChDirMode = 0
  let NERDTreeQuitOnOpen = 1
  let NERDTreeMouseMode = 2
  let NERDTreeShowHidden = 1
  let NERDTreeKeepTreeInNewTab = 1
  let g:nerdtree_tabs_open_on_gui_startup = 0
endif

" 注释NERDCommenter #github:scrooloose/nerdcommenter
" usage:<Leader>c<space>,<Leader>ca
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\nerdcommenter"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/nerdcommenter")))
  let g:NERDSpaceDelims = 1  " 注释和代码间衬1个空格
endif

" 语法检查Syntastic #github:scrooloose/syntastic
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\syntastic"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/syntastic")))
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_wq = 0
  let g:syntastic_error_symbol = "x"
  let g:syntastic_warning_symbol = "!"
endif

" undotree #github:mbbill/undotree
" usage:<Leader>u
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\undotree"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/undotree")))
  nnoremap <Leader>u :UndotreeToggle<CR>
  let g:undotree_WindowLayout = 2
  let g:undotree_SetFocusWhenToggle = 1
endif

" 多重修改vim-multiple-cursors #github:terryma/vim-multiple-cursors
" usage:1.marked with CTRL-n; 2.c/s,or v(to Normal mode)i/a
" 无

" 记号showmarks #github:exvim/ex-showmarks
" usage:<leader>mh,<leader>ma
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\ex-showmarks"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/ex-showmarks")))
  let g:showmarks_enable = 1
  let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
  let showmarks_ignore_type = "hqm"  " Ignore help,quickfix,non-modifiable buffers
  " Hilight lower&upper marks
  let showmarks_hlline_lower = 1
  let showmarks_hlline_upper = 0
endif

" 记号showmarks #github:jacquesbh/vim-showmarks
" usage:<leader>sm,:DoShowMarks,:NoShowMarks
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\vim-showmarks"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/vim-showmarks")))
  nmap <Leader>sm :DoShowMarks<CR>
  let g:showmarks_marks = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
endif

" EasyMotion #github:easymotion/vim-easymotion
" usage:f{char}
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\vim-easymotion"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/vim-easymotion")))
  let g:EasyMotion_do_mapping = 0  " Disable default mappings
  " 使用f{char}方式,默认大小写敏感
  nmap f <Plug>(easymotion-s)
endif

" 显示搜索匹配数 #github:henrik/vim-indexed-search
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\vim-indexed-search"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/vim-indexed-search")))
  let g:indexed_search_numbered_only = 1
endif

" 多选mark高亮,http://www.vim.org/scripts/script.php?script_id=2666
" 安装:手动使用UseVimball命令,:e name.vba,:UseVimball ~/.vim/bundle/mark
" usage:<Leader>m,<Leader>n,<Leader>N
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\mark"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/mark")))
  if (exists("g:oslinux") && !filereadable("~/.vim/autoload/pathogen.vim"))
    set rtp+=~/.vim/bundle/mark  " 使用Vundle时,手动UseVimball添加的插件没在rtp里
  endif
  " No overriding of *and#
  nmap <Plug>IgnoreMarkSearchNext <Plug>MarkSearchNext
  nmap <Plug>IgnoreMarkSearchPrev <Plug>MarkSearchPrev
  " 清空所有mark
  nmap <Leader>N :MarkClear<CR>
  if has("gui_running")
    let g:mwDefaultHighlightingPalette = 'extended'
    let g:mwDefaultHighlightingNum = 9  " default 6 in default and 18 in extended palette
  endif
endif

" 符号对齐Tabular #github:godlygeek/tabular
" usage:<Leader>a/{pattern}/[{aligned}]
if (exists("g:osmswin") && isdirectory(expand("$VIM\\vimfiles\\bundle\\tabular"))) ||
\  (exists("g:oslinux") && isdirectory(expand("~/.vim/bundle/tabular")))
  " 左中右对齐方式left/center/right
  nmap <Leader>a/ :Tabularize //l1l1l1<Left><Left><Left><Left><Left><Left><Left>
  vmap <Leader>a/ :Tabularize //l1l1l1<Left><Left><Left><Left><Left><Left><Left>
  "nmap <Leader>a& :Tabularize /&<CR>
  "vmap <Leader>a& :Tabularize /&<CR>
  nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
  vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
  "nmap <Leader>a=> :Tabularize /=><CR>
  "vmap <Leader>a=> :Tabularize /=><CR>
  "nmap <Leader>a: :Tabularize /:<CR>
  "vmap <Leader>a: :Tabularize /:<CR>
  "nmap <Leader>a:: :Tabularize /:\zs<CR>
  "vmap <Leader>a:: :Tabularize /:\zs<CR>
  "nmap <Leader>a, :Tabularize /,<CR>
  "vmap <Leader>a, :Tabularize /,<CR>
  "nmap <Leader>a,, :Tabularize /,\zs<CR>
  "vmap <Leader>a,, :Tabularize /,\zs<CR>
  "nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  "vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
endif

" TODO:配置doxygen
" TODO:起始页 #github:mhinz/vim-startify

"------
" about me:
" @UPDATE: by zyt, 2016.10.31
"  win: Cream-vim
"  ubuntu: vim-gtk / vim
"  mac:
" 本文件建议使用UNIX格式UTF-8编码保存.
"------------------------------

